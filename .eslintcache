[{"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\index.js":"1","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\App.js":"2","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Row.js":"4","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\requests.js":"5","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\axios.js":"6","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Banner.js":"7","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Nav.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":901,"mtime":1607627662737,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2223,"mtime":1607680032858,"results":"13","hashOfConfig":"10"},{"size":718,"mtime":1607610147254,"results":"14","hashOfConfig":"10"},{"size":195,"mtime":1607610140546,"results":"15","hashOfConfig":"10"},{"size":1838,"mtime":1607675332160,"results":"16","hashOfConfig":"10"},{"size":1045,"mtime":1607629747126,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1q7676o",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\index.js",[],["37","38"],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\App.js",[],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Row.js",["39"],"import React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url= \"https://image.tmdb.org/t/p/original/\";\r\n\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code which runs based on a specific condition/variable\r\n    useEffect(() => {\r\n        // if [], run once when the row loads, and dont run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            //https://developer.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then(url => { \r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n\r\n                })\r\n                .catch((error) => console.log(error));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className = \"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className =\"row__posters\">\r\n                \r\n\r\n                {movies.map(movie => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src= {`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n\r\n                ))}\r\n\r\n            <div>\r\n                    {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}   \r\n\r\n\r\n            </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","C:\\Users\\hkund\\netflix\\netflix-clone\\src\\requests.js",[],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\axios.js",[],["40","41"],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Banner.js",[],"C:\\Users\\hkund\\netflix\\netflix-clone\\src\\Nav.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":15},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'youtube' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]